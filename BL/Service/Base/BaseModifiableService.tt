<#@ template language="C#" #>
<#@ output extension=".cs" #>
<# string[] types = new[] {
    "Get", "Crud"
    };
#>
using BL.Models;
using Mapster;
using Shared.Filters;
using Shared.Modifiers;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace BL.Service
{
<# foreach (var type in types) { #>
    public abstract class BaseModifiable<#= type #>Service<T1, T2, T3, T4, T5> : Base<#= type #>Service<T1, T2, T3, T4>, IModifiable<#= type #>Service<T1, T4, T5> where T1 : IDto where T2 : DAL.Data.IDao where T3 : class, DAL.DataAccess.IModifiable<#= type #><T2, T4, T5>, new() where T4 : BaseFilter where T5 : BaseModifier
    {
        public async Task<T1> GetAsync(int id, T5 modifier)
        {
            return (await _instance.GetAsync(id, modifier)).Adapt<T1>();
        }

        public async Task<List<T1>> GetAsync(T4 filter, T5 modifier)
        {
            return (await _instance.GetAsync(filter, modifier)).Adapt<List<T1>>();
        }

        public async Task<List<T1>> GetAllAsync(T5 modifier)
        {
            return (await _instance.GetAllAsync(modifier)).Adapt<List<T1>>();
        }
    }

<# } #>
}
